<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TanvirArjel.EFCore.QueryRepository</name>
    </assembly>
    <members>
        <member name="T:TanvirArjel.EFCore.GenericRepository.IQueryRepository">
            <summary>
            Contains all the query methods. If you register the multiple DbContexts, it will use the last one.
            To use specific <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> please use <see cref="T:TanvirArjel.EFCore.GenericRepository.IQueryRepository`1"/>.
            </summary>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetQueryable``1">
            <summary>
            Gets <see cref="T:System.Linq.IQueryable`1"/> of the entity.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <returns>Returns <see cref="T:System.Linq.IQueryable`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(System.Threading.CancellationToken)">
            <summary>
            This method returns <see cref="T:System.Collections.Generic.List`1"/> without any filter. Call only when you want to pull all the data from the source.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method returns <see cref="T:System.Collections.Generic.List`1"/> without any filter. Call only when you want to pull all the data from the source.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(System.Func{System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            This method returns <see cref="T:System.Collections.Generic.List`1"/> without any filter. Call only when you want to pull all the data from the source.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="includes">Navigation properties to be loaded.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(System.Func{System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Object}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method returns <see cref="T:System.Collections.Generic.List`1"/> without any filter. Call only when you want to pull all the data from the source.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="includes">Navigation properties to be loaded.</param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            This method takes a <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The condition on which entity list will be returned.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method takes a <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The condition on which entity list will be returned.</param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Object}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method takes a <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The condition on which entity list will be returned.</param>
            <param name="includes">Navigation properties to be loaded.</param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(TanvirArjel.EFCore.GenericRepository.Specification{``0},System.Threading.CancellationToken)">
            <summary>
            This method takes an object of <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> as parameter and returns <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="specification">A <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> <see cref="T:System.Object"/> which contains all the conditions and criteria
            on which data will be returned.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(TanvirArjel.EFCore.GenericRepository.Specification{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method takes an object of <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> as parameter and returns <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="specification">A <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> <see cref="T:System.Object"/> which contains all the conditions and criteria
            on which data will be returned.
            </param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            This method returns <see cref="T:System.Collections.Generic.List`1"/> without any filter.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProjectedType">The type to which <typeparamref name="TEntity"/> will be projected.</typeparam>
            <param name="selectExpression">A <b>LINQ</b> select query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            This method takes <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProjectedType">The projected type.</typeparam>
            <param name="condition">The condition on which entity list will be returned.</param>
            <param name="selectExpression">The <see cref="N:System.Linq"/> select query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="selectExpression"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``2(TanvirArjel.EFCore.GenericRepository.Specification{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            This method takes an <see cref="T:System.Object"/> of <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> and <paramref name="selectExpression"/> as parameters and
            returns <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProjectedType">The projected type.</typeparam>
            <param name="specification">A <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> object which contains all the conditions and criteria
            on which data will be returned.
            </param>
            <param name="selectExpression">The <see cref="N:System.Linq"/> select query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Return <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="selectExpression"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``1(TanvirArjel.EFCore.GenericRepository.PaginationSpecification{``0},System.Threading.CancellationToken)">
            <summary>
            This method returns a <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginatedList`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="specification">An object of <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginationSpecification`1"/>.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginatedList`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="specification"/> is smaller than 1.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetListAsync``2(TanvirArjel.EFCore.GenericRepository.PaginationSpecification{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            This method returns a <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginatedList`1"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProjectedType">The projected type.</typeparam>
            <param name="specification">An object of <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginationSpecification`1"/>.</param>
            <param name="selectExpression">The <see cref="N:System.Linq"/> select query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="specification"/> is smaller than 1.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="selectExpression"/> is smaller than 1.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetByIdAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="id"/> which is the primary key value of the entity and returns the entity
            if found otherwise <see langword="null"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The primary key value of the entity.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetByIdAsync``1(System.Object,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="id"/> which is the primary key value of the entity and returns the entity
            if found otherwise <see langword="null"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The primary key value of the entity.</param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetByIdAsync``1(System.Object,System.Func{System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="id"/> which is the primary key value of the entity and returns the entity
            if found otherwise <see langword="null"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The primary key value of the entity.</param>
            <param name="includes">The navigation properties to be loaded.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetByIdAsync``1(System.Object,System.Func{System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Object}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="id"/> which is the primary key value of the entity and returns the entity
            if found otherwise <see langword="null"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The primary key value of the entity.</param>
            <param name="includes">The navigation properties to be loaded.</param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetByIdAsync``2(System.Object,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="id"/> which is the primary key value of the entity and returns the specified projected entity
            if found otherwise null.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProjectedType">The projected type.</typeparam>
            <param name="id">The primary key value of the entity.</param>
            <param name="selectExpression">The <see cref="N:System.Linq"/> select query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <typeparamref name="TProjectedType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="selectExpression"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            This method takes <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The conditon on which entity will be returned.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method takes <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The conditon on which entity will be returned.</param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Object}},System.Threading.CancellationToken)">
            <summary>
            This method takes <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The conditon on which entity will be returned.</param>
            <param name="includes">Navigation properties to be loaded.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Func{System.Linq.IQueryable{``0},Microsoft.EntityFrameworkCore.Query.IIncludableQueryable{``0,System.Object}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method takes <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The conditon on which entity will be returned.</param>
            <param name="includes">Navigation properties to be loaded.</param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <typeparamref name="TEntity"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetAsync``1(TanvirArjel.EFCore.GenericRepository.Specification{``0},System.Threading.CancellationToken)">
            <summary>
            This method takes an <see cref="T:System.Object"/> of <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> as parameter and returns <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="specification">A <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> object which contains all the conditions and criteria
            on which data will be returned.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetAsync``1(TanvirArjel.EFCore.GenericRepository.Specification{``0},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            This method takes an <see cref="T:System.Object"/> of <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> as parameter and returns <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="specification">A <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> object which contains all the conditions and criteria
            on which data will be returned.
            </param>
            <param name="asNoTracking">A <see cref="T:System.Boolean"/> value which determines whether the return entity will be tracked by
            EF Core context or not. Default value is false i.e tracking is enabled by default.
            </param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetAsync``2(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            This method takes <see cref="T:System.Linq.Expressions.Expression`1"/> as parameter and returns <typeparamref name="TEntity"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProjectedType">The projected type.</typeparam>
            <param name="condition">The conditon on which entity will be returned.</param>
            <param name="selectExpression">The <see cref="N:System.Linq"/> select query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Retuns <typeparamref name="TProjectedType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="selectExpression"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetAsync``2(TanvirArjel.EFCore.GenericRepository.Specification{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
            <summary>
            This method takes an <see cref="T:System.Object"/> of <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> and a <see cref="N:System.Linq"/> select  query
            and returns <typeparamref name="TProjectedType"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <typeparam name="TProjectedType">The type of the projected entity.</typeparam>
            <param name="specification">A <see cref="T:TanvirArjel.EFCore.GenericRepository.Specification`1"/> object which contains all the conditions and criteria
            on which data will be returned.
            </param>
            <param name="selectExpression">The <see cref="N:System.Linq"/> select  query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Retuns <typeparamref name="TProjectedType"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="selectExpression"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.ExistsAsync``1(System.Threading.CancellationToken)">
            <summary>
            This method checks whether the database table contains any record.
            and returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.ExistsAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            This method takes a predicate based on which existence of the entity will be determined
            and returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The condition based on which the existence will checked.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.ExistsByIdAsync``1(System.Object,System.Threading.CancellationToken)">
            <summary>
            This method takes primary key value of the entity whose existence be determined
            and returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Boolean"/>.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="id">The primary key value of the entity whose the existence will checked.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Boolean"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetCountAsync``1(System.Threading.CancellationToken)">
            <summary>
            This method returns all count in <see cref="T:System.Int32"/> type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetCountAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            This method takes one or more <em>predicates</em> and returns the count in <see cref="T:System.Int32"/> type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The condition based on which count will be done.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetCountAsync``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Threading.CancellationToken)">
            <summary>
            This method takes one or more <em>predicates</em> and returns the count in <see cref="T:System.Int32"/> type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="conditions">The conditions based on which count will be done.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Int32"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetLongCountAsync``1(System.Threading.CancellationToken)">
            <summary>
            This method returns all count in <see cref="T:System.Int64"/> type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Retuns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetLongCountAsync``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            This method takes one or more <em>predicates</em> and returns the count in <see cref="T:System.Int64"/> type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="condition">The condition based on which count will be done.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Retuns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetLongCountAsync``1(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}}},System.Threading.CancellationToken)">
            <summary>
            This method takes one or more <em>predicates</em> and returns the count in <see cref="T:System.Int64"/> type.
            </summary>
            <typeparam name="TEntity">The type of the entity.</typeparam>
            <param name="conditions">The conditions based on which count will be done.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Retuns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:System.Int64"/>.</returns>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetFromRawSqlAsync``1(System.String,System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="sql"/> string as parameter and returns the result of the provided sql.
            </summary>
            <typeparam name="T">The <see langword="type"/> to which the result will be mapped.</typeparam>
            <param name="sql">The sql query string.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sql"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetFromRawSqlAsync``1(System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="sql"/> string and the value of <paramref name="parameter"/> mentioned in the sql query as parameters
            and returns the result of the provided sql.
            </summary>
            <typeparam name="T">The <see langword="type"/> to which the result will be mapped.</typeparam>
            <param name="sql">The sql query string.</param>
            <param name="parameter">The value of the paramter mention in the sql query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sql"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetFromRawSqlAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Data.Common.DbParameter},System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="sql"/> string and values of the <paramref name="parameters"/> mentioned in the sql query as parameters
            and returns the result of the provided sql.
            </summary>
            <typeparam name="T">The <see langword="type"/> to which the result will be mapped.</typeparam>
            <param name="sql">The sql query string.</param>
            <param name="parameters">The values of the parameters mentioned in the sql query.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sql"/> is <see langword="null"/>.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.IQueryRepository.GetFromRawSqlAsync``1(System.String,System.Collections.Generic.IEnumerable{System.Object},System.Threading.CancellationToken)">
            <summary>
            This method takes <paramref name="sql"/> string and values of the <paramref name="parameters"/> mentioned in the sql query as parameters
            and returns the result of the provided sql.
            <para>
            The paramters names mentioned in the query should be like p0, p1,p2 etc.
            </para>
            </summary>
            <typeparam name="T">The <see langword="type"/> to which the result will be mapped.</typeparam>
            <param name="sql">The sql query string.</param>
            <param name="parameters">The values of the parameters mentioned in the sql query. The values should be primitive types.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="sql"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TanvirArjel.EFCore.GenericRepository.IQueryRepository`1">
            <summary>
            Contains all the query methods.
            </summary>
            <typeparam name="TDbContext">The type of the <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.</typeparam>
        </member>
        <member name="T:TanvirArjel.EFCore.GenericRepository.PaginatedList`1">
            <summary>
            The object contains pagination info and items.
            </summary>
            <typeparam name="T">The type of the entity.</typeparam>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.PaginatedList`1.#ctor(System.Collections.Generic.List{`0},System.Int64,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginatedList`1"/> class.
            The constructor takes necessary info for pagiantion.
            </summary>
            <param name="items">The items of current page.</param>
            <param name="totalItems">Total item count of the list.</param>
            <param name="pageIndex">Current page index.</param>
            <param name="pageSize">Pagiantion page size.</param>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.PaginatedList`1.PageIndex">
            <summary>
            Gets the index of the current page.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.PaginatedList`1.PageSize">
            <summary>
            Gets the number of items in each page.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.PaginatedList`1.TotalPages">
            <summary>
            Gets total page count of the list.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.PaginatedList`1.TotalItems">
            <summary>
            Gets total items count in the list.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.PaginatedList`1.Items">
            <summary>
            Gets the items of the current page.
            </summary>
        </member>
        <member name="T:TanvirArjel.EFCore.GenericRepository.PaginationSpecification`1">
            <summary>
            This object holds the pagination query specifications.
            </summary>
            <typeparam name="T">The database entity i.e an <see cref="T:Microsoft.EntityFrameworkCore.DbSet`1"/> object.</typeparam>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.PaginationSpecification`1.PageIndex">
            <summary>
            Gets or sets the current page index.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.PaginationSpecification`1.PageSize">
            <summary>
            Gets or sets the page size.
            </summary>
        </member>
        <member name="T:TanvirArjel.EFCore.GenericRepository.QueryableExtensions">
            <summary>
            Contains <see cref="T:System.Linq.Queryable"/> extension methods for paginated list.
            </summary>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.QueryableExtensions.ToPaginatedListAsync``1(System.Linq.IQueryable{``0},System.Int32,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Convert the <see cref="T:System.Linq.IQueryable`1"/> into paginated list.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Linq.IQueryable"/>.</typeparam>
            <param name="source">The type to be extended.</param>
            <param name="pageIndex">The current page index.</param>
            <param name="pageSize">Size of the pagiantion.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginatedList`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="pageIndex"/> is smaller than 1.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="pageSize"/> is smaller than 1.</exception>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.QueryableExtensions.ToPaginatedListAsync``1(System.Linq.IQueryable{``0},TanvirArjel.EFCore.GenericRepository.PaginationSpecification{``0},System.Threading.CancellationToken)">
            <summary>
            Convert the <see cref="T:System.Linq.IQueryable`1"/> into paginated list.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Linq.IQueryable"/>.</typeparam>
            <param name="source">The type to be extended.</param>
            <param name="specification">An object of <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginationSpecification`1"/>.</param>
            <param name="cancellationToken"> A <see cref="T:System.Threading.CancellationToken"/> to observe while waiting for the task to complete.</param>
            <returns>Returns <see cref="T:System.Threading.Tasks.Task"/> of <see cref="T:TanvirArjel.EFCore.GenericRepository.PaginatedList`1"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="source"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="specification"/> is smaller than 1.</exception>
        </member>
        <member name="T:TanvirArjel.EFCore.GenericRepository.ServiceCollectionExtensions">
            <summary>
            Contain all the service collection extension methods.
            </summary>
        </member>
        <member name="M:TanvirArjel.EFCore.GenericRepository.ServiceCollectionExtensions.AddQueryRepository``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            Add generic query repository services to the .NET Dependency Injection container.
            </summary>
            <typeparam name="TDbContext">Your EF Core <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/>.</typeparam>
            <param name="services">The type to be extended.</param>
            <param name="lifetime">The life time of the service.</param>
            <returns>Retruns <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="services"/> is <see langword="null"/>.</exception>
        </member>
        <member name="T:TanvirArjel.EFCore.GenericRepository.Specification`1">
            <summary>
            This object hold the query specifications.
            </summary>
            <typeparam name="T">The database entity.</typeparam>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.Specification`1.Skip">
            <summary>
            Gets or sets the value of number of item you want to skip in the query.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.Specification`1.Take">
            <summary>
            Gets or sets the value of number of item you want to take in the query.
            </summary>
        </member>
        <member name="T:TanvirArjel.EFCore.GenericRepository.SpecificationBase`1">
            <summary>
            This object hold the query specifications.
            </summary>
            <typeparam name="T">The database entity.</typeparam>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.SpecificationBase`1.Conditions">
            <summary>
            Gets or sets the <see cref="T:System.Linq.Expressions.Expression`1"/> list you want to pass with your EF Core query.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.SpecificationBase`1.Includes">
            <summary>
            Gets or sets the navigation entities to be eager loadded with EF Core query.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.SpecificationBase`1.OrderBy">
            <summary>
            Gets or sets the <see cref="T:System.Func`2"/> to order by your query.
            </summary>
        </member>
        <member name="P:TanvirArjel.EFCore.GenericRepository.SpecificationBase`1.OrderByDynamic">
            <summary>
            Gets or sets dynmic order by option in string format.
            </summary>
        </member>
    </members>
</doc>
